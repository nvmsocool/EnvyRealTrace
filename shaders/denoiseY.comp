#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_KHR_vulkan_glsl : enable

#include "raycommon.glsl"

const int GROUP_SIZE = 16;
layout(local_size_x = 1, local_size_y = GROUP_SIZE, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D outImage;
layout(set = 0, binding = 1, rgba32f) uniform image2D inImage;
layout(set = 0, binding = 2, rgba32f) uniform image2D gBuff;

 // Variables shared with other threads in the 128x1 thread group
shared vec4 v[GROUP_SIZE+101];
shared vec3 v_n[GROUP_SIZE+101];
shared vec3 v_p[GROUP_SIZE+101];
shared vec3 v_v[GROUP_SIZE+101];

// kernel weights, hardcoded for now
const float weights[5] = float[5](0.0625, 0.25, 0.375, 0.25, 0.0625);

layout(push_constant) uniform pcDenoise
{
  float normFactor;
  float depthFactor;
  float varianceFactor;
  float lumenFactor;
  int dist;
};

void main()
{

  int w = 2;
	int nonz_dist = dist;
	int extent = w * nonz_dist;

	ivec2 gpos = ivec2(gl_GlobalInvocationID.xy); // Combo of groupID, groupSize and localID
	uint i = gl_LocalInvocationID.y; // Local thread id in the 128x1 thread groups128x1

	// read an image pixel at an ivec2(.,.) position
	v[i] = imageLoad(inImage, gpos+ivec2(0,-extent)); 
	vec4 gb = imageLoad(gBuff, gpos+ivec2(0,-extent));
	v_p[i] = gb.xyz;
	v_n[i] = DecompressUnitVec(floatBitsToUint(gb.w));
	if (i<2*extent)
	{
		// read extra 2*w pixels
		v[i+GROUP_SIZE] = imageLoad(inImage, gpos+ivec2(0,(GROUP_SIZE-extent))); 
		vec4 gb_e = imageLoad(gBuff, gpos+ivec2(0,(GROUP_SIZE-extent)));
		v_p[i+GROUP_SIZE] = gb_e.xyz;
		v_n[i+GROUP_SIZE] = DecompressUnitVec(floatBitsToUint(gb_e.w));
	}

	// Wait for all threads to catchup before reading v[]
	barrier();

	// blur pixel
	vec4 blurredPixel = vec4(0,0,0,0);
	float total_weight = 0.0;
	vec3 my_norm = v_n[i+extent];
	vec3 my_pos = v_p[i+extent];
	for (int j=-w; j<=w; j++) {
		float n_factor = max(0,dot(v_n[i+(j*nonz_dist)+extent],my_norm));
		float p_factor = max(0,(depthFactor - length(v_p[i+(j*nonz_dist)+extent]-my_pos))/depthFactor);
		float total_factor = weights[j+w] * n_factor * p_factor;
		blurredPixel += v[i+(j*nonz_dist)+extent] * total_factor;
		total_weight += total_factor;
	}
	blurredPixel /= total_weight;

	// store result
	imageStore(outImage, gpos, blurredPixel); // Write to destination image
}