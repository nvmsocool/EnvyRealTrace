#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_KHR_vulkan_glsl : enable

#include "raycommon.glsl"

const int GROUP_SIZE = 128;
layout(local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D inImage;
layout(set = 0, binding = 1, rgba32f) uniform image2D outImage;
layout(set = 0, binding = 2, rgba32f) uniform image2D gBuff;
layout(set = 0, binding = 3, rgba32f) uniform image2D varBuff;

 // Variables shared with other threads in the 128x1 thread group
const int max_kernel_size = 129;
shared vec4 v[GROUP_SIZE+max_kernel_size];
shared vec3 v_n[GROUP_SIZE+max_kernel_size];
shared vec3 v_p[GROUP_SIZE+max_kernel_size];

shared float l[GROUP_SIZE+max_kernel_size];
shared float l2[GROUP_SIZE+max_kernel_size];
shared float v_v[GROUP_SIZE+max_kernel_size];

// kernel weights, hardcoded for now
const float weights[5] = float[5](0.0625, 0.25, 0.375, 0.25, 0.0625);

layout(push_constant) uniform pcDenoise
{
  float normFactor;
  float depthFactor;
  float varianceFactor;
  float lumenFactor;
  int dist;
};

void main()
{

  int w = 2;
	int nonz_dist = dist;
	int extent = w * nonz_dist;

  ivec2 gpos = ivec2(gl_GlobalInvocationID.xy); // Combo of groupID, groupSize and localID
	uint i = gl_LocalInvocationID.x; // Local thread id in the 128x1 thread groups128x1

	// read an image pixel at an ivec2(.,.) position
	v[i] = imageLoad(inImage, gpos+ivec2(-extent,0)); 
	vec4 gb = imageLoad(gBuff, gpos+ivec2(-extent,0));
	v_p[i] = gb.xyz;
	v_n[i] = DecompressUnitVec(floatBitsToUint(gb.w));
    l[i] = 0.2126 * v[i].r + 0.7152 * v[i].g + 0.0722 * v[i].b;
	l2[i] = l[i] * l[i];
	if (i<2*extent)
	{
		// read extra 2*w pixels
		v[i+GROUP_SIZE] = imageLoad(inImage, gpos+ivec2((GROUP_SIZE-extent),0)); 
		vec4 gb_e = imageLoad(gBuff, gpos+ivec2((GROUP_SIZE-extent),0));
		v_p[i+GROUP_SIZE] = gb_e.xyz;
		v_n[i+GROUP_SIZE] = DecompressUnitVec(floatBitsToUint(gb_e.w));
        
        l[i+GROUP_SIZE] = 0.2126 * v[i+GROUP_SIZE].r + 0.7152 * v[i+GROUP_SIZE].g + 0.0722 * v[i+GROUP_SIZE].b;
	    l2[i+GROUP_SIZE] = l[i+GROUP_SIZE] * l[i+GROUP_SIZE];
	}

	// Wait for all threads to catchup before reading v[]
	barrier();
    
    {
        float sum = 0;
        float sum2 = 0;
	    float total_weight = 0.0;
	    vec3 my_norm = v_n[i];
	    vec3 my_pos = v_p[i];

	    for (int j=-1; j<=1; j++) {
		    float n_factor = pow(max(0,dot(v_n[i+j],my_norm)),normFactor);
		    float p_factor = min(1,max(0,(depthFactor - length(v_p[i+j]-my_pos))/depthFactor));
		    float total_factor = weights[j+w] * n_factor * p_factor;

		    sum += l[i+j] *  total_factor;
		    sum2 += l2[i+j] * total_factor;
		    total_weight += total_factor;
	    }
        
        sum /= total_weight;
        sum2 /= total_weight;
        v_v[i] = sum2 - sum * sum;
        
        // if (i<2*extent)
        // {
        //     sum = 0;
        //     sum2 = 0;
	    //     total_weight = 0.0;
	    //     my_norm = v_n[i+GROUP_SIZE];
	    //     my_pos = v_p[i+GROUP_SIZE];
        // 
	    //     for (int j=-1; j<=1; j++) {
		//         float n_factor = pow(max(0,dot(v_n[i+GROUP_SIZE+j],my_norm)),normFactor);
		//         float p_factor = min(1,max(0,(depthFactor - length(v_p[i+GROUP_SIZE+j]-my_pos))/depthFactor));
		//         float total_factor = weights[j+w] * n_factor * p_factor;
        // 
		//         sum += l[i+GROUP_SIZE+j] *  weights[j+w] * total_factor;
		//         sum2 += l2[i+GROUP_SIZE+j] *  weights[j+w] * total_factor;
		//         total_weight += total_factor;
	    //     }
        // 
        //     sum /= total_weight;
        //     sum2 /= total_weight;
        //     v_v[i+GROUP_SIZE] = sum2 - sum * sum;
        // }
    }
    
	barrier();

	// blur pixel
	vec4 blurredPixel = vec4(0,0,0,0);
	float total_weight = 0.0;
	vec3 my_norm = v_n[i+extent];
	vec3 my_pos = v_p[i+extent];
    float my_stdev = sqrt(max(0,v_v[i+extent]));
    float my_lum = l[i+extent];
	for (int j=-w; j<=w; j++) {
		float n_factor = pow(max(0,dot(v_n[i+(j*nonz_dist)+extent],my_norm)),normFactor);
		float p_factor = min(1,max(0,(depthFactor - length(v_p[i+(j*nonz_dist)+extent]-my_pos))/depthFactor));
        float v_factor = min(1,max(0,exp(-abs(my_lum-l[i+(j*nonz_dist)+extent])/(varianceFactor*my_stdev+0.001))));
		float total_factor = weights[j+w] * n_factor * p_factor * v_factor;
		blurredPixel += v[i+(j*nonz_dist)+extent] * total_factor;
		total_weight += total_factor;
	}
	blurredPixel /= total_weight;

	// store result
	imageStore(outImage, gpos, blurredPixel); // Write to destination image
}