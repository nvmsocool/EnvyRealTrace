/*
 * Copyright (c) 2019-2021, NVIDIA CORPORATION.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-FileCopyrightText: Copyright (c) 2019-2021 NVIDIA CORPORATION
 * SPDX-License-Identifier: Apache-2.0
 */
 
#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_KHR_vulkan_glsl : enable
#include "raycommon.glsl"


const int GROUP_SIZE = 16;
layout(local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D inImage;
layout(set = 0, binding = 1, rgba32f) uniform image2D outImage;

shared vec4 v[GROUP_SIZE+101]; // Variable shared with other threads in the 128x1 thread group
const float weights[5] = float[5](0.0625, 0.025, 0.375, 0.025, 0.0625);

void main()
{

  int w = 2;

  ivec2 gpos = ivec2(gl_GlobalInvocationID.xy); // Combo of groupID, groupSize and localID
	uint i = gl_LocalInvocationID.x; // Local thread id in the 128x1 thread groups128x1
	v[i] = imageLoad(inImage, gpos+ivec2(-w,0)); // read an image pixel at an ivec2(.,.) position
	if (i<2*w) v[i+GROUP_SIZE] = imageLoad(inImage, gpos+ivec2((GROUP_SIZE-w),0)); // read extra 2*w pixels
	barrier(); // Wait for all threads to catchup before reading v[]
	vec4 blurredPixel = vec4(0,0,0,0);
	for (int j=-w; j<=w; j++) {
		blurredPixel += weights[j+w] * v[i+j+w];
	}

	imageStore(outImage, gpos, blurredPixel); // Write to destination image
}