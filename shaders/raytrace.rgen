#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64  : require
#extension GL_GOOGLE_include_directive : enable

#include "host_device.h"
#include "raycommon.glsl"
#include "sampling.glsl"

layout(location = 0) rayPayloadEXT hitPayload prd;
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 2, set = 0, rgba32f) uniform image2D colorHistory;
layout(binding = 3, set = 0, rgba32f) uniform image2D posHistory;
layout(binding = 4, set = 0, rgba32f) uniform image2D pos;
layout(binding = 5, set = 0) uniform sampler2D posHistorySampler;
layout(binding = 6, set = 0, rgba32ui) uniform uimage2D blueNoise;

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

float rand(vec2 co, int r){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * (r + 43758.5453));
}

vec3 rainbow(float frame)
{
  float h = 6 * frame / pcRay.numSteps;
  float r = 0;
  float g = 0;
  float b = 0;
  if (frame == 0)
  {
    return vec3(0,0,0);
  }
  if (h < 1) {
      r = 1;
      g = h;
      b = 0;
  }
  else if (h < 2){
      r = 2 - h;
      g = 1;
      b = 0;
  }
  else if (h < 3){
      r = 0;
      g = 1;
      b = h - 2;
  }
  else if (h < 4){
      r = 0;
      g = 4 - h;
      b = 1;
  }
  else if (h < 5){
      r = h - 4;
      g = 0;
      b = 1;
  }
  else
  {
      r = 1;
      g = 0;
      b = 6 - min(6, h);
  }

  return vec3(r,g,b);
}

float depth_factor = pcRay.posTolerance;

float getSampleWeight(vec3 firstHitNorm, vec3 firstHitPos, vec4 pos, float sampleWeight)
{
    float n_factor = max(0,dot(DecompressUnitVec(floatBitsToUint(pos.w)),firstHitNorm));
	float p_factor = max(0,(depth_factor - length(pos.xyz-firstHitPos))/depth_factor);
    return sampleWeight *n_factor *p_factor ;
}

void main() 
{
    int r_x = int(mod(gl_LaunchIDEXT.x + pcRay.randSeed , float(gl_LaunchSizeEXT.x)));
    int r_y = int(mod(gl_LaunchIDEXT.y + pcRay.randSeed2, float(gl_LaunchSizeEXT.y)));
    uvec4 blue = imageLoad(blueNoise, ivec2(r_x, r_y));
    prd.seed = blue.x;
    // prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, pcRay.randSeed);

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + vec2(rand(gl_LaunchIDEXT.xy, pcRay.randSeed)-.5, rand(gl_LaunchIDEXT.yx, pcRay.randSeed)-.5) * pcRay.jitter;
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);

    vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    prd.rayOrigin    = origin.xyz;
    prd.rayDirection = direction.xyz;
    prd.weight       = vec3(0);

    vec3 curWeight = vec3(1);
    vec3 hitValue  = vec3(0);

    bool first = true;
    vec3 firstHitPos = vec3(0);
    uint firstHitNorm;

    for(prd.depth = 0; prd.depth < 10; prd.depth++)
    {

        traceRayEXT(
            topLevelAS,        // acceleration structure
            rayFlags,          // rayFlags
            0xFF,              // cullMask
            0,                 // sbtRecordOffset
            0,                 // sbtRecordStride
            0,                 // missIndex
            prd.rayOrigin,     // ray origin
            tMin,              // ray min range
            prd.rayDirection,  // ray direction
            tMax,              // ray max range
            0                  // payload (location = 0)
        );

        //get first hit world location
        if (first)
        {
          first = false;
          firstHitPos = prd.rayOrigin;
          firstHitNorm = CompressUnitVec(prd.hitNorm);
        }

        

        if (pcRay.ExplicitLightRays)
        {
        
          hitPayload second = prd;
          hitValue += 0.5 * prd.hitValue * curWeight;
          curWeight *= prd.weight;

          //explicit light connection trace one beyond the current path
          prd.rayDirection = -normalize(pcRay.randLightPos - prd.rayOrigin);

          traceRayEXT(
              topLevelAS,        // acceleration structure
              rayFlags,          // rayFlags
              0xFF,              // cullMask
              0,                 // sbtRecordOffset
              0,                 // sbtRecordStride
              0,                 // missIndex
              prd.rayOrigin,     // ray origin
              tMin,              // ray min range
              prd.rayDirection,  // ray direction
              tMax,              // ray max range
              0                  // payload (location = 0)
          );

          // add light from explicit, weighted
          if ((prd.hitValue.x > 0 || prd.hitValue.y > 0 || prd.hitValue.z > 0) && dot(prd.rayDirection, second.rayDirection) > 0)
          {
            hitValue += prd.hitValue * curWeight;
          }
        
          //return to bouce location
          prd = second;
        }
        else
        {
          hitValue += prd.hitValue * curWeight;
          curWeight *= prd.weight;
        }
    }

    float f = pcRay.frame;

    //store the first hit from this frame
    imageStore(pos, ivec2(gl_LaunchIDEXT.xy), vec4(firstHitPos, uintBitsToFloat(firstHitNorm)));

    // find equivelant fragment from last frame, based on world position
    // store camera perpectice from last frame, re-calculate screen space of point

    vec4 screenProjected = (uni.priorViewProj * vec4(firstHitPos, 1.0));
    vec2 screenspace = ((screenProjected.xy / screenProjected.w) + vec2(1.0)) / 2.0;
    
    float frame = 0;
    vec3 old_color;

    if (!(screenspace.x < 0 || screenspace.x > 1 || screenspace.y < 0 || screenspace.y > 1))
    {
      // fragment was visible in last camera view
      vec4 priorHistory = texture(posHistorySampler, screenspace);
      vec3 priorFirstHit = priorHistory.xyz;
      vec3 priorfirstNorm = DecompressUnitVec(firstHitNorm);
    
      if (length(priorFirstHit - firstHitPos) < pcRay.posTolerance)
      {
        // fragment was not occluded in last camera view
        // pull color and frame from colorHistory
        //vec4 history = texture(colorHistory, screenspace);
        //vec4 history = imageLoad(colorHistory, ivec2(screenspace * gl_LaunchSizeEXT.xy));

        vec2 loc_f = screenspace * gl_LaunchSizeEXT.xy - vec2(0.5);
        vec2 pixelPctOff = fract(loc_f);
        ivec2 location = ivec2(loc_f);

        vec4 h_00 = imageLoad(colorHistory, location             );
        vec4 h_10 = imageLoad(colorHistory, location + ivec2(1,0));
        vec4 h_01 = imageLoad(colorHistory, location + ivec2(0,1));
        vec4 h_11 = imageLoad(colorHistory, location + ivec2(1,1));
        
        vec4 p_00 = imageLoad(posHistory, location             );
        vec4 p_10 = imageLoad(posHistory, location + ivec2(1,0));
        vec4 p_01 = imageLoad(posHistory, location + ivec2(0,1));
        vec4 p_11 = imageLoad(posHistory, location + ivec2(1,1));

        float w_11 = getSampleWeight(priorfirstNorm, firstHitPos, p_11, pixelPctOff.x * pixelPctOff.y);
        float w_10 = getSampleWeight(priorfirstNorm, firstHitPos, p_10, pixelPctOff.x * (1-pixelPctOff.y));
        float w_01 = getSampleWeight(priorfirstNorm, firstHitPos, p_01, (1-pixelPctOff.x) * pixelPctOff.y); 
        float w_00 = getSampleWeight(priorfirstNorm, firstHitPos, p_00, (1 - pixelPctOff.x) * (1 - pixelPctOff.y));


        vec4 history = 
          (h_11 * w_11 + 
          h_10 * w_10 + 
          h_01 * w_01 + 
          h_00 * w_00) / (w_11 + w_10 + w_01 + w_00);
        
        //history = imageLoad(colorHistory, location);
        old_color = history.xyz;

        //map 0,1, with 1 = max error, to 1 * subPixelReduction, 0
        
        frame = history.w * (1-pixelPctOff.x * pixelPctOff.y * pcRay.subPixelErrRedux);
      }
    }

    if (pcRay.historyView)
    {
      imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(rainbow(frame), frame+1));
      return;
    }

    //run some extras for fresh pixels
    int extra_frames_to_trace = max(0,int(pcRay.np_m * frame + pcRay.np_b));
    vec3 new_color = hitValue;

    for (int i = 0; i < extra_frames_to_trace; i++)
    {
        prd.rayOrigin    = origin.xyz;
        prd.rayDirection = direction.xyz;
        prd.weight       = vec3(0);
        curWeight = vec3(1);
        hitValue  = vec3(0);
        
        int ir_x = int(mod(gl_LaunchIDEXT.x + pcRay.randSeed  * (i+2), float(gl_LaunchSizeEXT.x)));
        int ir_y = int(mod(gl_LaunchIDEXT.y + pcRay.randSeed2 * (i+2), float(gl_LaunchSizeEXT.y)));
        uvec4 iblue = imageLoad(blueNoise, ivec2(ir_x, ir_y));
        prd.seed = iblue.x;
    
        for(prd.depth = 0; prd.depth < 10; prd.depth++)
        {
    
            traceRayEXT(
                topLevelAS,        // acceleration structure
                rayFlags,          // rayFlags
                0xFF,              // cullMask
                0,                 // sbtRecordOffset
                0,                 // sbtRecordStride
                0,                 // missIndex
                prd.rayOrigin,     // ray origin
                tMin,              // ray min range
                prd.rayDirection,  // ray direction
                tMax,              // ray max range
                0                  // payload (location = 0)
            );
            hitValue += prd.hitValue * curWeight;
            curWeight *= prd.weight;
        }
    
        new_color += hitValue;
    }

    float traced_this_pass = 1 + extra_frames_to_trace;
    new_color = new_color / traced_this_pass;

    if(frame >= 1.0 && pcRay.frame > 0)
    {
      float a         = traced_this_pass / (traced_this_pass + frame);
      new_color = vec3(mix(old_color, new_color, a));
    }
    else
    {
      // First frame, replace the value in the buffer
      frame = 0;
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(new_color, frame+traced_this_pass));

}
