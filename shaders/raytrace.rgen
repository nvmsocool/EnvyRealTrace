#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64  : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable

#include "host_device.h"
#include "raycommon.glsl"
#include "sampling.glsl"

layout(location = 0) rayPayloadEXT hitPayload prd;
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 2, set = 0) uniform sampler2D colorHistory;
layout(binding = 3, set = 0, rgba32f) uniform image2D posHistory;
layout(binding = 4, set = 0, rgba32f) uniform image2D pos;

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

float rand(vec2 co, int r){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * (r + 43758.5453));
}

void main() 
{
    prd.seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));

    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + vec2(rand(gl_LaunchIDEXT.xy, pcRay.randSeed), rand(gl_LaunchIDEXT.yx, pcRay.randSeed)) * 0;
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
    vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);

    vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

    uint  rayFlags = gl_RayFlagsOpaqueEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;

    prd.rayOrigin    = origin.xyz;
    prd.rayDirection = direction.xyz;
    prd.weight       = vec3(0);

    vec3 curWeight = vec3(1);
    vec3 hitValue  = vec3(0);

    bool first = true;
    vec3 firstHitPos = vec3(0);

    for(prd.depth = 0; prd.depth < 10; prd.depth++)
    {
        traceRayEXT(
            topLevelAS,        // acceleration structure
            rayFlags,          // rayFlags
            0xFF,              // cullMask
            0,                 // sbtRecordOffset
            0,                 // sbtRecordStride
            0,                 // missIndex
            prd.rayOrigin,     // ray origin
            tMin,              // ray min range
            prd.rayDirection,  // ray direction
            tMax,              // ray max range
            0                  // payload (location = 0)
        );

        //get first hit world location
        if (first)
        {
          first = false;
          firstHitPos = prd.rayOrigin;
        }

        hitValue += prd.hitValue * curWeight;
        curWeight *= prd.weight;
    }

    float f = pcRay.frame;

    //store the first hit from this frame
    imageStore(pos, ivec2(gl_LaunchIDEXT.xy), vec4(firstHitPos, 1));

    // find equivelant fragment from last frame, based on world position
    // store camera perpectice from last frame, re-calculate screen space of point

    vec4 screenProjected = (uni.priorViewProj * vec4(firstHitPos, 1.0));
    vec2 screenspace = ((screenProjected.xy / screenProjected.w) + vec2(1)) / 2;
    ivec2 screenspace_pixels = ivec2(screenspace.x * gl_LaunchSizeEXT.x, screenspace.y * gl_LaunchSizeEXT.y);
    
    float frame = 0;
    vec3 old_color;

    if (!(screenspace.x < 0 || screenspace.x > 1 || screenspace.y < 0 || screenspace.y > 1))
    {
      // fragment was visible in last camera view
      vec3 priorFirstHit = imageLoad(posHistory, screenspace_pixels).xyz;
    
      if (length(priorFirstHit - firstHitPos) < 0.1)
      {
        // fragment was not occluded in last camera view
        // pull color and frame from colorHistory
        vec4 history = texture(colorHistory, screenspace);
        //vec4 history = imageLoad(colorHistory, screenspace_pixels);
        old_color = history.xyz;
        frame = history.w;
      }
    }


    // if outside of history view, rest frame to 1 (value = trace from above)
    // else
    //   pull position from posHistory
    //   if not within epsilon
    //     reset frame to 1 (value = trace from above)
    //   else
    //     TODO: look into more involved variance estimates, limit history contribution when variance is high
    //     pull prior color/iteration count from colorHist

    // run additional traces if frame count is low

    //if (abs(imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).z - imageLoad(colorHistory, ivec2(gl_LaunchIDEXT.xy)).z) > 0.001)
    //{
    //  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(0,0,1,1));
    //  return;
    //}

    //imageStore(image, ivec2(gl_LaunchIDEXT.xy), imageLoad(colorHistory, ivec2(gl_LaunchIDEXT.xy)));

    if(frame >= 1.0)
    {
      float a         = 1.0f / frame;
      vec3  new_color = vec3(mix(old_color, hitValue, a));
      imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(new_color, min(100,frame+1)));
    }
    else
    {
      // First frame, replace the value in the buffer
      imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(hitValue, 1));
    }

    // store color, iteration, and position in historys
    // imageStore(pos, ivec2(gl_LaunchIDEXT.xy), vec4(firstHitPos, 1));

}
